name: Deploy

env:
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

on:
  push:
    branches:
      - netlify-edge
  pull_request:
    branches:
      - netlify-edge
    types:
      - opened
      - synchronize

jobs:
  deploy:
    name: Deploy
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".tool-versions"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: pnpm-deps-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm i --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Deploy to production
        if: ${{ startsWith(github.ref, 'refs/heads/netlify-edge') }}
        run: |
          netlify build \
            --context production \
            --telemetry-disable
          netlify deploy \
            --message "${{ steps.vars.outputs.COMMIT_MESSAGE }}" \
            --prod \
            --telemetry-disable

      - name: Deploy preview
        id: preview
        if: ${{ github.event.pull_request.state == 'open' }}
        run: |
          netlify deploy \
            --message "${{ steps.vars.outputs.COMMIT_MESSAGE }}" \
            --build \
            --context deploy-preview \
            --telemetry-disable \
            --json \
            > deploy.json
          DEPLOYMENT_URL=$(jq -r '.deploy_url' deploy.json)
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> "$GITHUB_OUTPUT"
          jq '.' deploy.json

      - name: Update comment on PR
        if: ${{ github.event.pull_request.state == 'open' }}
        env:
          DEPLOYMENT_URL: ${{ steps.preview.outputs.DEPLOYMENT_URL }}
        uses: actions/github-script@v6
        with:
          script: |
            // Find previous comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const comment = comments.find(({ body }) => body.startsWith('Deployment preview ready!'));

            // Remove comment
            comment && await github.rest.issues.deleteComment({
              comment_id: comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Add comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Deployment preview ready!\n\n[${{ env.DEPLOYMENT_URL }}](${{ env.DEPLOYMENT_URL }})"
            });
